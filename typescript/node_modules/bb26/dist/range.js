"use strict";
/* eslint-disable @typescript-eslint/unified-signatures, no-redeclare */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const to_decimal_1 = __importDefault(require("./to-decimal"));
const increment_1 = __importDefault(require("./increment"));
/**
 * Creates an array of bijective base-26 numerals progressing from `start` up
 * to, but not including, `end`.
 *
 * If `end` is not specified, it's set to `start` with `start` then set to `'A'`.
 *
 * ```
 * import { range } from 'bb26'
 *
 * range('B')       // ['A']
 * range('C')       // ['A', 'B']
 * range('B', 'C')  // ['B']
 * range('B', 'D')  // ['B', 'C']
 * range('Z', 'AC') // ['Z', 'AA', 'AB']
 * ```
 *
 * @param start - The start of the range
 * @param end - The end of the range
 */
function range(start, end) {
    const _range = [];
    const _end = end !== null && end !== void 0 ? end : start;
    const _start = end ? start : 'A';
    for (let i = _start; (0, to_decimal_1.default)(i) < (0, to_decimal_1.default)(_end); i = (0, increment_1.default)(i)) {
        _range.push(i);
    }
    return _range;
}
exports.default = range;
